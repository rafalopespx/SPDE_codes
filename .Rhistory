control.family=list(hyper=list(
prec=list(prior="gaussian",
param=c(0,1))))
)
output4 = inla(formula, family="gaussian", data=my.data,
control.family=list(hyper=list(
prec=list(prior="loggamma",param=c(1,0.01))))
)
plot(inla.smarginal(post.sigma),type="l",xlab="",
ylab="",main=expression(paste("Post. marg. of ", sigma)))
lines(inla.smarginal(post.sigma3),col=2)
post.sigma3 = inla.tmarginal(function(x) sqrt(1/x),
output3$marginals.hyperpar[[1]])
post.sigma4 = inla.tmarginal(function(x) sqrt(1/x),
output4$marginals.hyperpar[[1]])
plot(inla.smarginal(post.sigma),type="l",xlab="",
ylab="",main=expression(paste("Post. marg. of ", sigma)))
lines(inla.smarginal(post.sigma3),col=2)
lines(inla.smarginal(post.sigma4),col=3)
abline(v=sigma)
legend("topright",col=c(1,2,3),lty=c(1,1,1),
legend=c("Default","Normal(0,1)","logGamma(1,0.01)"),box.lty=0)
output4 = inla(formula, family="gaussian", data=my.data,
control.family=list(hyper=list(
prec=list(prior="loggamma",param=c(1,0.0001))))
)
post.sigma3 = inla.tmarginal(function(x) sqrt(1/x),
output3$marginals.hyperpar[[1]])
post.sigma4 = inla.tmarginal(function(x) sqrt(1/x),
output4$marginals.hyperpar[[1]])
plot(inla.smarginal(post.sigma),type="l",xlab="",
ylab="",main=expression(paste("Post. marg. of ", sigma)))
lines(inla.smarginal(post.sigma3),col=2)
lines(inla.smarginal(post.sigma4),col=3)
abline(v=sigma)
legend("topright",col=c(1,2,3),lty=c(1,1,1),
legend=c("Default","Normal(0,1)","logGamma(1,0.01)"),box.lty=0)
plot(x,y) #plot the data
set.seed(1234) #set the seed
n = 100
sigma = 0.1
beta.0 =  2
beta.1 = 0.5
x = runif(n)
eta = beta.0 +  beta.1*x
y = rnorm(n,eta,sigma)
plot(x,y) #plot the data
my.data = data.frame(y=y,x=x)
library(INLA)
formula = y ~ 1 + x
output = inla(formula, family="gaussian", data=my.data)
summary(output)
names(output$marginals.fixed)
class(output$marginals.fixed)
post.beta0 = output$marginals.fixed[[1]]
post.beta1 = output$marginals.fixed$x
####beta1
plot(inla.smarginal(post.beta1),
type="l",
xlab="",
ylab="",
main=expression(paste("Post. marg. of ", beta[1])))
hpd.beta1 = inla.hpdmarginal(p=0.95,post.beta1)
# Prepare everything for the hpd polygon
xvalues = seq(hpd.beta1[1], hpd.beta1[2], length.out = 256)
yvalues = inla.dmarginal(xvalues,post.beta1)
xvalues = c(hpd.beta1[1],xvalues,hpd.beta1[2])
yvalues = c(0,yvalues,0)
polygon(xvalues,
yvalues,
col = "slateblue1",
border = 1)
####Intercept
plot(inla.smarginal(post.beta0),type="l",xlab="",ylab="",
main=expression(paste("Post. marg. of ", beta[0])))
hpd.beta0 = inla.hpdmarginal(p=0.95,post.beta0)
# Prepare everything for the hpd polygon
xvalues = seq(hpd.beta0[1], hpd.beta0[2], length.out = 256)
yvalues = inla.dmarginal(xvalues,post.beta0)
xvalues = c(hpd.beta0[1],xvalues,hpd.beta0[2])
yvalues = c(0,yvalues,0)
polygon(xvalues, yvalues,
col = "slateblue1", border = 1)
post.sigma = inla.tmarginal(function(x) sqrt(1/x),
output$marginals.hyperpar[[1]])
plot(inla.smarginal(post.sigma),
type="l",
xlab="",
ylab="",
main=expression(paste("Post. marg. of ", sigma)))
hpd.sigma = inla.hpdmarginal(p=0.95,post.sigma)
# Prepare everything for the hpd polygon
xvalues = seq(hpd.sigma[1], hpd.sigma[2], length.out = 256)
yvalues = inla.dmarginal(xvalues,post.sigma)
xvalues = c(hpd.sigma[1],xvalues,hpd.sigma[2])
yvalues = c(0,yvalues,0)
polygon(xvalues, yvalues, col = "slateblue1", border = 1)
inla.zmarginal(post.sigma)
output2 = inla(formula,
family="gaussian",
data=my.data,
## Changing the precision of NormDist used for estimate
control.fixed=list(mean=0,
prec=1,
mean.intercept=0,
prec.intercept=0.0001))
plot(inla.smarginal(post.beta0),
type="l",
xlab="",
ylab="",
main=expression(paste("Post. marg. of ",
beta[0])))
lines(inla.smarginal(output2$marginals.fixed[[1]]),col=2)
abline(v=beta.0)
legend("topleft",col=c(1,2),lty=c(1,1),
legend=c("Default","Normal(0,0.0001)"),box.lty=0)
output3 = inla(formula,
family="gaussian",
data=my.data,
## Changing for a NormDist(0,1) on the log of precision
control.family=list(hyper=list(
prec=list(prior="gaussian",
param=c(0,1))))
)
output4 = inla(formula,
family="gaussian",
data=my.data,
control.family=list(hyper=list(
prec=list(prior="loggamma",param=c(1,0.0001))))
)
output4 = inla(formula,
family="gaussian",
data=my.data,
## Changing for a Gamma(1,0.01)
control.family=list(hyper=list(
prec=list(prior="loggamma",
param=c(1,0.01))))
)
post.sigma3 = inla.tmarginal(function(x) sqrt(1/x),
output3$marginals.hyperpar[[1]])
post.sigma4 = inla.tmarginal(function(x) sqrt(1/x),
output4$marginals.hyperpar[[1]])
plot(inla.smarginal(post.sigma),type="l",xlab="",
ylab="",main=expression(paste("Post. marg. of ", sigma)))
lines(inla.smarginal(post.sigma3),col=2)
lines(inla.smarginal(post.sigma4),col=3)
abline(v=sigma)
legend("topright",col=c(1,2,3),lty=c(1,1,1),
legend=c("Default","Normal(0,1)","logGamma(1,0.01)"),box.lty=0)
plot(inla.smarginal(post.sigma),type="l",xlab="",
ylab="",main=expression(paste("Post. marg. of ", sigma)))
lines(inla.smarginal(post.sigma3),col=2)
lines(inla.smarginal(post.sigma4),col=3)
abline(v=sigma)
smarginal0<-inla.smarginal(post.sigma)
smarginal0<-inla.smarginal(post.sigma)
smarginal2<-inla.smarginal(post.sigma3)
smarginal3<-inla.smarginal(post.sigma4)
View(smarginal0)
smarginal0<-inla.smarginal(post.sigma) %>%
bind_rows
library(tidyverse)
smarginal0<-inla.smarginal(post.sigma) %>%
bind_rows
smarginal2<-inla.smarginal(post.sigma3) %>%
bind_rows()
smarginal3<-inla.smarginal(post.sigma4) %>%
bind_rows()
View(smarginal0)
smarginal0 %>%
ggplot(aes(x = x , y = y, col = "smarginal for post.sigma"))+
geom_line()
smarginal0 %>%
ggplot(aes(x = x , y = y,
col = "smarginal for post.sigma"))+
geom_line()+
geom_line(data = smarginal2,
aes(x = x, y = y,
col = "smarginal for post.sigma3"))+
geom_line(data = smarginal3, aes(x = x , y = y ,
col = "smarginal for post.sigma4"))+
theme_bw()
smarginal0 %>%
ggplot(aes(x = x , y = y,
col = "marginal for post.sigma"))+
geom_line()+
geom_line(data = smarginal2,
aes(x = x, y = y,
col = "marginal for post.sigma3"))+
geom_line(data = smarginal3, aes(x = x , y = y ,
col = "marginal for post.sigma4"))+
theme_bw()+
scale_color_viridis_d(name = "Marginal Posterior", option = "viridis")
library(spData); library(sf); library(tidyverse)
world <- st_read(system.file("shapes/world.gpkg", package="spData"))
plot(world["pop"])
world_sp <- as(world, "Spatial")
class(world_sp)
world_sf <- st_as_sf(world_sp)
world_sp <- as(world, "Spatial")
class(world_sp)
world_sf <- st_as_sf(world_sp)
class(world_sf)
world %>% select(lifeExp) %>% plot()
plot(world["pop"])
class(world)
worlg_geo <- st_geometry(world)
world %>% st_geometry() %>% plot()
world
world_sf
world_sp
library(SpatialEpi)
data(seed)
data(Seeds)
is.element("sf", installed.packages())
install.packages("sf", dep=TRUE)
install.packages("sf", dep = TRUE)
library(INLA)         # Integrated Nested Laplace Approximation package
library(dplyr)        # A package for data manipulation
library(sf)           # Simple feature for R
library(spdep)        # Functions and tests for evaluating spatial patterns
# and autocorrelation
library(SpatialEpi)   # Methods and data for spatial epidemiology
# Packages used for visualization
library(RColorBrewer) # A package providing colour palettes for shading maps
# and other plots
library(tmap)         # A package for static and interactive maps
library(ggplot2)      # A package that implements the grammar of graphics, which is a term used to
# break up graphs into semantic components, such as geometries and layers.
library(mapview)      # A package for interactive maps
library(cowplot)      # Add-on to ggplot. It provides features that help us with creating
LTLA <- st_read("Practical2a/LTLA_shp.shp")
class(LTLA)
# Check geometry
st_geometry_type(LTLA)
# Check what CRS this file data is in
st_crs(LTLA) # the data are encoded using a Transverse Mercator Projection.
# Check the spatial extent of the shapefile (i.e. the geographic "edge" or location that is the furthest north, south east and west)
st_bbox(LTLA)
# View all of the metadata and attributes for this shapefile object
LTLA
plot(LTLA)          # plot all the attributes
plot(LTLA$geometry) # plot only the boundaries
ggplot() +
geom_sf(data = LTLA, color = "red", fill = "white") +
ggtitle("Map of LTLAs in England") +
coord_sf() +    #axis limits and CRS
labs(x = "Longitude", y = "Latitude", fill = "") +
theme_bw() +    # dark-on-light theme
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
tm_shape(LTLA) +
tm_fill("tomato") +
tm_borders(lty="dashed", col="gold") +
tm_style("natural", bg.color="grey90") +
tm_layout(title="Map of LTLAs in England")
## Static map for LTLA
tm_shape(LTLA) +
tm_fill("tomato") +
tm_borders(lty="dashed", col="gold") +
tm_style("natural", bg.color="grey90") +
tm_layout(title="Map of LTLAs in England")
tm_shape(LTLA) +
tm_fill("grey90") +
tm_borders(lty="solid", col="skyblue1") +
tm_style("albatross") +
tm_layout(title="Static Map of LTLAs in England")
tm_shape(LTLA) +
tm_fill("grey90") +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of LTLAs in England")
View(LTLA)
mapview(LTLA)
COVID19Deaths<-read.csv("Practical2a/COVID19Deaths.csv")
COVID19Deaths$SMR <- COVID19Deaths$O/COVID19Deaths$E
View(COVID19Deaths)
COVID19Deaths<-read.csv("Practical2a/COVID19Deaths.csv")
View(COVID19Deaths)
COVID19Deaths$SMR <- COVID19Deaths$O/COVID19Deaths$E
England_SMR <- left_join(LTLA, COVID19Deaths, by = c("LTLA" = "LTLA"))
plot(England_SMR["O"])
plot(England_SMR["SMR"], breaks = c(0,0.5,1,1.5,2))
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR), col = NA) +
scale_fill_viridis_c(limits = c(0,2)) + theme_bw() -> MapSMR1
MapSMR1
View(COVID19Deaths)
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR), col = NA) +
# scale_fill_viridis_c(limits = c(0,2)) +
colorspace::scale_fill_continuous_divergingx("Spectral")+
theme_bw() -> MapSMR1
MapSMR1
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR), col = NA) +
# scale_fill_viridis_c(limits = c(0,2)) +
colorspace::scale_fill_continuous_divergingx("Spectral", limits = c(0,2))+
theme_bw() -> MapSMR1
MapSMR1
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR), col = NA) +
# scale_fill_viridis_c(limits = c(0,2)) +
colorspace::scale_fill_continuous_divergingx("RdYlBu", limits = c(0,2))+
theme_bw() -> MapSMR1
MapSMR1
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR), col = NA) +
scale_fill_viridis_c(limits = c(0,2), option = "turbo") +
# colorspace::scale_fill_continuous_divergingx("RdYlBu", limits = c(0,2))+
theme_bw() -> MapSMR1
MapSMR1
tmap_mode("plot")
tm_shape(England_SMR) +
tm_polygons("SMR",palette="RdYlGn", style="cont", n=8) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Map of SMRs at LTLA level in England")
tmap_mode("plot")
tm_shape(England_SMR) +
tm_polygons("IMD",style="pretty", n=8, alpha=0.5) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Map of IMD at LTLA level in England")
breaks =  c(0,0.5,1,1.5,2)
England_SMR <- mutate(England_SMR, SMR_cat = cut(SMR, breaks, include.lowest = TRUE)) # mutate() adds new variables
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR_cat), col = NA) +
theme_bw() +
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))breaks =  c(0,0.5,1,1.5,2)
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR_cat), col = NA) +
theme_bw() +
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))
breaks =  c(0,0.5,1,1.5,2)
England_SMR <- mutate(England_SMR, SMR_cat = cut(SMR, breaks, include.lowest = TRUE)) # mutate() adds new variables
ggplot() +
geom_sf(data = England_SMR, aes(fill = SMR_cat), col = NA) +
theme_bw() +
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))
ID<- seq(1,317)
formula_iid <- O ~ f(ID, model="iid",
hyper=list(prec = list(
prior = "pc.prec",
param = c(0.5 / 0.31, 0.01))))
mod_iid <- inla(formula=formula_iid,
family="poisson",
data=England_SMR,
E=E,
control.compute=list(dic=TRUE, waic=TRUE))
mod_iid$waic$waic
mod_iid$dic$dic
formula_reg <- O ~ IMD + f(ID, model="iid",
hyper=list(prec = list(
prior = "pc.prec",
param = c(0.5 / 0.31, 0.01))))
mod_reg <- inla(formula=formula_reg,
family="poisson",
data=England_SMR,
E=E,
control.compute=list(dic=TRUE, waic=TRUE))
mod_reg$waic$waic
RR_COVID<-c()
for(i in 1:317){
RR_COVID[i] <- inla.emarginal(function(x) exp(x),
mod_iid$marginals.random$ID[[i]])
}
England_SMR$RR <- RR_COVID
ggplot() +
geom_sf(data = England_SMR, aes(fill = RR), col = NA) +
theme_bw() +
scale_fill_viridis_c(limits = c(0,2), opiton = "turbo") -> MapRR1
ggplot() +
geom_sf(data = England_SMR, aes(fill = RR), col = NA) +
theme_bw() +
scale_fill_viridis_c(limits = c(0,2), opiton = "turbo") -> MapRR1
ggplot() +
geom_sf(data = England_SMR, aes(fill = RR), col = NA) +
theme_bw() +
scale_fill_viridis_c(limits = c(0,2), option = "turbo") -> MapRR1
MapRR1
plot_grid(MapSMR1, MapRR1, ncol = 1, align = 'v', labels="AUTO", rel_widths = c(1, 1))
plot_grid(MapSMR1, MapRR1, ncol = 2, align = 'v', labels="AUTO", rel_widths = c(1, 1))
library(tidyverse)
library(sf)
library(SpatialEpi)
library(RColorBrewer)
London <- st_read("Practical2b/GreaterLondon_ward_river.shp")
st_crs(London)
# You can see that:
# the data are encoded using a Transverse Mercator Projection.
# the airy ellipsoid is used
# the units are meters
London
plot(London)          # plot all the attributes
plot(London[,c(1,2)]) # plot selected attributes
ggplot() +
geom_sf(data = London, color = "red", fill = "white") +
ggtitle("Map of London") +
coord_sf() +    # axis limits and CRS
labs(x = "Longitude", y = "Latitude", fill = "") +
theme_bw() +    # dark-on-light theme
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
HaemMal <- read_csv("Practical2b/HaemMal.csv") # the structure is a tibble
HaemByWard <- HaemMal %>%
group_by(STwardcode, POLY_ID) %>%
summarise(cases = sum(CASES),
population = sum(POPULATION)) %>%
arrange(POLY_ID)
HaemMal <- arrange(HaemMal, POLY_ID, SEX, AGE_GROUP)
HaemByWard$E <- expected(population=HaemMal$POPULATION,
cases=HaemMal$CASES,
n.strata=44)
London_SMR <- left_join(London, HaemByWard)
# display all the palettes
display.brewer.all()
# display colorblind-friendly brewer palettes
display.brewer.all(colorblindFriendly = TRUE)
# display single RColorBrewer palette by specifying its name
display.brewer.pal(n = 5, name = "OrRd")
# display hexadecimal color
brewer.pal(n = 5, name = "OrRd")
# pick a palette you like and plot the SMRs
MapSMR <- ggplot() +
geom_sf(data = London_SMR) +
aes(fill = SMR_cat) +
theme_bw() +     # plot white background and black gridlines
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))
MapSMR
# pick a palette you like and plot the SMRs
MapSMR <- ggplot(aes(fill = SMR_cat)) +
geom_sf(data = London_SMR) +
theme_bw() +     # plot white background and black gridlines
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))
# pick a palette you like and plot the SMRs
MapSMR <- ggplot() +
geom_sf(data = London_SMR, aes(fill = SMR_cat)) +
theme_bw() +     # plot white background and black gridlines
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))
MapSMR
London_SMR <- mutate(London_SMR, SMR_cat = cut(SMR, breaks))
breaks =  c(0,0.5,1,1.5,2,2.5)
London_SMR <- mutate(London_SMR, SMR_cat = cut(SMR, breaks))
London_SMR <- left_join(London, HaemByWard)
breaks =  c(0,0.5,1,1.5,2,2.5)
London_SMR <- mutate(London_SMR, SMR_cat = cut(SMR, breaks))
breaks =  c(0,0.5,1,1.5,2,2.5)
London_SMR <- mutate(London_SMR, SMR_cat = cut(SMR, breaks))
View(London_SMR)
HaemByWard$SMR <- HaemByWard$cases/HaemByWard$E
HaemByWard$E <- expected(population=HaemMal$POPULATION,
cases=HaemMal$CASES,
n.strata=44)
HaemByWard$SMR <- HaemByWard$cases/HaemByWard$E
London_SMR <- left_join(London, HaemByWard)
breaks =  c(0,0.5,1,1.5,2,2.5)
London_SMR <- mutate(London_SMR, SMR_cat = cut(SMR, breaks))
# pick a palette you like and plot the SMRs
MapSMR <- ggplot() +
geom_sf(data = London_SMR, aes(fill = SMR_cat)) +
theme_bw() +     # plot white background and black gridlines
scale_fill_brewer(palette = "OrRd") +
guides(fill=guide_legend(title="SMR"))
MapSMR
COVID19Deaths<-read.csv("Practical2a/COVID19Deaths.csv")
View(COVID19Deaths)
View(HaemMal)
unique(HaemMal$POLY_ID)
length(unique(HaemMal$POLY_ID))
length(unique(HaemMal$AGE_GROUP))
length(unique(HaemMal$STwardcode))
length(unique(HaemMal$STWardName))
library(brpop)
install.packages("brpop")
library(brpop)
brpop<-mun_pop()
brpop<-mun_pop()
mun_pop()
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
mun_pop()
library(brpop)
mun_pop()
brpop<-mun_pop()
View(brpop)
brpop_sex<-mun_sex_pop()
View(brpop_sex)
unique(brpop_sex$year)
install.packages("geobr")
muni_br<-geobr::
muni_br<-geobr::read_municipality()
brpop_geo<-muni_br %>% left_join(brpop_sex)
library(tidyverse)
brpop_geo<-muni_br %>% left_join(brpop_sex)
brpop_geo<-muni_br %>% left_join(brpop_sex %>% rename(code_muni  = mun))
View(brpop_geo)
brpop_geo<-muni_br %>% left_join(brpop_sex %>% filter(year == 2021) %>% rename(code_muni  = mun))
View(brpop_geo)
brpop_geo<-muni_br %>% left_join(brpop_sex %>% filter(year == 2021) %>% rename(code_muni  = mun))
brpop_geo<-muni_br %>% mutate(code_muni = subset(code_muni,1,6)) left_join(brpop_sex %>% filter(year == 2021) %>% rename(code_muni  = mun))
brpop_geo<-muni_br %>% mutate(code_muni = subset(code_muni,1,6)) %>% left_join(brpop_sex %>% filter(year == 2021) %>% rename(code_muni  = mun))
brpop_geo<-muni_br %>% mutate(code_muni = as.double(substr(code_muni,1,6))) %>% left_join(brpop_sex %>% filter(year == 2021) %>% rename(code_muni  = mun))
brpop_geo %>% geom_sf(aes(fill = pop))+facet_grid(.~sex)
brpop_geo %>% ggplot()+geom_sf(aes(fill = pop))+facet_grid(.~sex)
